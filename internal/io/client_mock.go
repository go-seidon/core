// Code generated by MockGen. DO NOT EDIT.
// Source: internal/io/client.go

// Package io is a generated GoMock package.
package io

import (
	fs "io/fs"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileManagerService is a mock of FileManagerService interface.
type MockFileManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerServiceMockRecorder
}

// MockFileManagerServiceMockRecorder is the mock recorder for MockFileManagerService.
type MockFileManagerServiceMockRecorder struct {
	mock *MockFileManagerService
}

// NewMockFileManagerService creates a new mock instance.
func NewMockFileManagerService(ctrl *gomock.Controller) *MockFileManagerService {
	mock := &MockFileManagerService{ctrl: ctrl}
	mock.recorder = &MockFileManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManagerService) EXPECT() *MockFileManagerServiceMockRecorder {
	return m.recorder
}

// IsFileExists mocks base method.
func (m *MockFileManagerService) IsFileExists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFileExists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFileExists indicates an expected call of IsFileExists.
func (mr *MockFileManagerServiceMockRecorder) IsFileExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFileExists", reflect.TypeOf((*MockFileManagerService)(nil).IsFileExists), path)
}

// Open mocks base method.
func (m *MockFileManagerService) Open(path string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", path)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileManagerServiceMockRecorder) Open(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileManagerService)(nil).Open), path)
}

// ReadFile mocks base method.
func (m *MockFileManagerService) ReadFile(file *os.File) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", file)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileManagerServiceMockRecorder) ReadFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileManagerService)(nil).ReadFile), file)
}

// WriteFile mocks base method.
func (m *MockFileManagerService) WriteFile(name string, data []byte, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", name, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileManagerServiceMockRecorder) WriteFile(name, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileManagerService)(nil).WriteFile), name, data, perm)
}

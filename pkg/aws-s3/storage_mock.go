// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws-s3/storage.go

// Package aws_s3 is a generated GoMock package.
package aws_s3

import (
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockAwsS3Client is a mock of AwsS3Client interface.
type MockAwsS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockAwsS3ClientMockRecorder
}

// MockAwsS3ClientMockRecorder is the mock recorder for MockAwsS3Client.
type MockAwsS3ClientMockRecorder struct {
	mock *MockAwsS3Client
}

// NewMockAwsS3Client creates a new mock instance.
func NewMockAwsS3Client(ctrl *gomock.Controller) *MockAwsS3Client {
	mock := &MockAwsS3Client{ctrl: ctrl}
	mock.recorder = &MockAwsS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAwsS3Client) EXPECT() *MockAwsS3ClientMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockAwsS3Client) GetObject(arg0 *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockAwsS3ClientMockRecorder) GetObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockAwsS3Client)(nil).GetObject), arg0)
}

// PutObject mocks base method.
func (m *MockAwsS3Client) PutObject(arg0 *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockAwsS3ClientMockRecorder) PutObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockAwsS3Client)(nil).PutObject), arg0)
}
